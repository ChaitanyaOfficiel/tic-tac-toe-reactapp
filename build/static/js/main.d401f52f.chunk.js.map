{"version":3,"sources":["App.js","index.js"],"names":["initial_state","symbols","player","gameOver","store","createStore","state","action","type","payload","Block","symbol","changeSymbol","position","xIsNext","Box","sx","width","height","margin","border","backgroundColor","display","className","onClick","e","BoardContainer","connect","dispatch","setSymbols","setPlayer","setGameOver","status","useState","setXisNext","useEffect","s","alert","i","Typography","variant","mt","style","fontWeight","color","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d401f52f.chunk.js","sourcesContent":["import React from \"react\"\nimport Box from '@mui/material/Box';\nimport {useEffect,useState} from 'react';\nimport {connect, Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport Typography from '@mui/material/Typography';\n\n// declaring initial state\nconst initial_state ={\n  symbols: [0,0,0,0,0,0,0,0,0],\n  player: 1,\n  gameOver: false\n};\n// declaring reducer\nconst reducer = (state=initial_state,action) =>{\n  switch(action.type){\n    case 'SET_PLAYER':\n      return{...state, player:action.payload}\n    case 'SET_SYMBOLS':\n      return {...state, symbols:action.payload}\n    case 'SET_GAMEOVER':\n      return {...state, gameOver:action.payload}\n      \n    default:\n      return state;\n  }\n}\n\n// declaring store value \nconst store = createStore(reducer);\n\n// function Application\nfunction App() {\n  \n  return(\n  \n     \n     <div className=\"Game\">\n     <Provider store={store}>\n   <BoardContainer>\n   </BoardContainer>\n      </Provider>\n     </div>\n  \n   \n  )\n}\n// declaring mapstateto props\nconst mapStateToProps = (state)=> {\nreturn {\n symbols : state.symbols,\n player : state.player,\n gameOver: state.gameOver\n\n}\n}\n// declaring map dispatch to props\nconst mapDispatchToProps = (dispatch)=> {\n  return{\n    setSymbols: (symbols)=>{\n      dispatch({type:'SET_SYMBOLS',payload:symbols})\n    }, \n    setPlayer: (player)=>{\n      dispatch({type:'SET_PLAYER',payload:player})\n    },\n    setGameOver : (status) => {\n      dispatch({type:'SET_GAMEOVER',payload:status})\n    }\n  }\n}\n// declaring function Block\nfunction Block({symbol, changeSymbol, position,xIsNext}){\n  return (\n  <>\n    <Box  sx={{\n      width:80,\n      height:80,\n      margin:2,\n      border:'2px solid #cfe8fc',\n      backgroundColor:'white',\n      display: 'inline-block'\n    }} \n    className={`Box symbol${symbol}`}\n    onClick={e =>changeSymbol(position)}\n    \n    >\n    </Box>\n    \n    </>\n   \n  )\n    \n}\n// \n\n// declaring boardcontaier and connect to Board function\nconst BoardContainer = connect(mapStateToProps, mapDispatchToProps)(Board);\n// declaring Board function\nfunction Board({symbols, setSymbols,gameOver, setGameOver, player, setPlayer}){\n  // changing the player \n  const[xIsNext, setXisNext] = useState(true);\n  // calculating winner combinations\n  useEffect(() => {\n    const combinations = [\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,8],\n      [1,4,7],\n      [2,5,8],\n      [0,4,8],\n      [2,4,6]\n    ]\n    for(let s of combinations){\n      if(symbols[s[0]]===1 && symbols[s[1]] ===1 && symbols[s[2]] ===1){\n        alert('Player 1 wins');\n        setGameOver(true)\n      }\n      if(symbols[s[0]]===2 && symbols[s[1]] ===2 && symbols[s[2]] ===2){\n        alert('Player 2 wins');\n        setGameOver(true)\n      }\n    }\n\n  }, [symbols])\n  // declaring change symbol \n  const changeSymbol = (i) =>{\n    const s = [...symbols];\n    // condition of notequal gameover\n  if(!gameOver){\n    if(s[i] === 0){\n      s[i] = player;\n      setSymbols(s);\n      setPlayer(player === 1 ? 2:1);\n     player = xIsNext ? \"Player1\" : \"Player2\";\n     setXisNext(!xIsNext);\n     }\n    //  condition for empty blocks\n     else{\n     \n      alert('please click on empty blocks');\n     }\n    //  condition for gameOver to start new game\n  } else{\n    alert('GameOver Please start a new game');\n  }}\n\n  // ouput of array \n  \n \n\n  return (\n   \n    <div className='board'>\n    <Typography variant=\"h6\" mt={6} \n      style={{ fontWeight: 600,color:'black' }}\n     >\n       Tic-tac-toe Game\n      </Typography>\n      <div>\n      <Block symbol={symbols[0]} position={0} changeSymbol={changeSymbol} ></Block>\n      <Block symbol={symbols[1]} position={1} changeSymbol={changeSymbol}></Block>\n      <Block symbol={symbols[2]} position={2}changeSymbol={changeSymbol} ></Block>\n      </div>\n      <div>\n      <Block symbol={symbols[3]} position={3}changeSymbol={changeSymbol} ></Block>\n      <Block symbol={symbols[4]} position={4} changeSymbol={changeSymbol} ></Block>\n      <Block symbol={symbols[5]} position={5} changeSymbol={changeSymbol} ></Block>\n      </div>\n      <div>\n      <Block symbol={symbols[6]} position={6} changeSymbol={changeSymbol} ></Block>\n      <Block symbol={symbols[7]} position={7} changeSymbol={changeSymbol} ></Block>\n      <Block symbol={symbols[8]} position={8} changeSymbol={changeSymbol} ></Block>\n      </div>\n      {/* declaring changing player turns */}\n     <p>\n      {xIsNext ? \"Player 1 Move\" : \"Player 2 Move\"}\n      </p>\n     \n    </div>\n   \n  )\n}\n\n\n  \n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}